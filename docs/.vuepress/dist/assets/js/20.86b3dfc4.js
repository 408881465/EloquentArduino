(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{189:function(t,n,s){"use strict";s.r(n);var e=s(0),a=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"content"},[s("p",[t._v("Eloquent Arduino is an attempt to bring sanity and most of all clarity in Arduino projects' code.Â \nArduino sells itself as a platform well suited for beginners, and it is for sure.\nLots of non-tech people are able to bring their ideas to life thanks to this awesome platform.\nNevertheless, I often stumble on random bits of code over the internet that make me think about the\nquality of the projects people are producing.")]),t._v(" "),s("p",[t._v("Even the Arduino official site is misleading in this sense, in my opinion, since it promotes a code style\nreally straighforward, but suited for toy projects, with little logics and low complexity level.\nWhen things start to get seriuous (and it soon happens as your project grows),\nit is quite inevitable that you'll come into trouble, since you will be mixing lots of variables,\nflags and states, thus producing the (in)famous spaghetti code.\nHere's an example of what I'm talking about, copy-pasted from the Arduino official site (with comments removed):")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" currentMillis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("millis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentMillis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" previousMillis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" interval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    previousMillis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentMillis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ledState "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" LOW"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      ledState "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" HIGH"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      ledState "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LOW"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("digitalWrite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ledPin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ledState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Can you tell what this code does with a minimum mental effort? I don't think so\n(it actually blinks a LED in a non-blocking fashion). And this is the problem: most Arduino code is not "),s("strong",[t._v("eloquent")]),t._v(".\nBy eloquent I mean code that speaks by itself, without the need for comments. What about the following:")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("every")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("interval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" SECONDS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        led"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toggle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Hopefully, it does the exact same thing as above, yet it is far more readable and understandable.\nCan you see my point now? Wouldn't it be much easier and reliable to code with the help of a\nset of such eloquent constructs / interfaces? I strongly believe it is, and this is why I'm writing this library.\nAsynchronous programming, pin state managements, animations are bits of code that pop up over and over again\nin most of the projects, yet every time we start from zero and write the same boilerplate code over and over again.\nBoilerplate code is not only tedious, but error-prone, since it heavily relies on a fixed structure that\ncould be not that easy to adapt to your specific case. And lengthy! Longer code means more chances to break\nsomething and more code to debug, which can waste lots of your valuable time.")])])}],!1,null,null,null);n.default=a.exports}}]);