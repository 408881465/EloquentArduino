(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{187:function(e,t,o){"use strict";o.r(t);var n=o(0),s=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",{staticClass:"content"},[o("h1",{attrs:{id:"svm"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#svm","aria-hidden":"true"}},[e._v("#")]),e._v(" SVM")]),e._v(" "),o("p",[e._v("Machine learning on microcontrollers is a hot topic these days.\nAdafruit [https://blog.adafruit.com/2019/06/24/tiny-machine-learning-on-the-edge-with-tensorflow-lite-running-on-samd51-arduino-tensorflow-tinyml-tensorflow/](seems to be the first who ported TensorFlow Lite to his SAMD51 boards).\nBut TensorFlow (and deep learning) are not the whole machine learning world, so I\nexplored the possibility to port other algorithms to resource-constrained hardware.")]),e._v(" "),o("p",[e._v("One that seems fit to this purpose was SVM (Support Vector Machines): they're quite\nsimple to use and work pretty well for lots of classification problems. Of course\nyou will need to train a model on your PC: then you can run that model on the Arduino\nto do the classification.")]),e._v(" "),o("p",[e._v('The whole project is to get a sklearn SVM classifier and "export" it to plain C.\nOf course the porting should strive to keep the program space and memory usage to\nthe minimum, well below the Arduino boards limits, so the user can still write its\nown code to actually do something useful.')]),e._v(" "),o("p",[e._v("Using the Arduino UNO board as a reference, I got 6372 bytes (19%) of program space and 264 bytes (12%)\nof memory for a toy sketch that classifies three samples of the IRIS dataset.\nThis means the model has a tiny footprint and it's embeddable in almost any project.")])])}],!1,null,null,null);t.default=s.exports}}]);